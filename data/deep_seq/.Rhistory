card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="Metaxa2 PCoA")
Most abundant microbes and ARGs
tail(birds_metaxa_norm[order(rowSums(birds_metaxa_norm)),])
tail(birds_card_norm[order(rowSums(birds_card_norm)),])
bad_card <- c("gb|AFH35853.1|ARO:3001328|Escherichia",
"gb|NP_414996.1|ARO:3004043|Escherichia",
"gb|NP_418813.1|ARO:3004109|Escherichia",
"gb|CCE36834|ARO:3003784|Mycobacterium",
"gb|AAO47226.2|ARO:3003318|Streptomyces",
"gb|YP_003971446|ARO:3003730|Bifidobacteria",
"gb|BAD59497.1|ARO:3000501|Nocardia",
"gb|CAA67349.1|ARO:3003359|Streptomyces")
warnings()
dev.off()
bad_card <- c("gb|AFH35853.1|ARO:3001328|Escherichia",
"gb|NP_414996.1|ARO:3004043|Escherichia",
"gb|NP_418813.1|ARO:3004109|Escherichia",
"gb|CCE36834|ARO:3003784|Mycobacterium",
"gb|AAO47226.2|ARO:3003318|Streptomyces",
"gb|YP_003971446|ARO:3003730|Bifidobacteria",
"gb|BAD59497.1|ARO:3000501|Nocardia",
"gb|CAA67349.1|ARO:3003359|Streptomyces")
birds_card <- birds_card[!(rownames(birds_card) %in% bad_card),]
birds_metaxa_norm <- sweep(birds_metaxa, 2, c(4.5, 3.3, 2.9, 2.7, 0.1, 2.5), '/')
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
card_dist <- vegdist(t(birds_card_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="CARD PCoA")
card_dist <- vegdist(t(birds_metaxa_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="Metaxa2 PCoA")
tail(birds_metaxa_norm[order(rowSums(birds_metaxa_norm)),])
tail(birds_card_norm[order(rowSums(birds_card_norm)),])
tail(birds_metaxa_norm[order(rowSums(birds_metaxa_norm)),])
tail(birds_card_norm[order(rowSums(birds_card_norm)),])
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="CARD PCoA")
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="Metaxa2 PCoA")
card_dist <- vegdist(t(birds_card_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="CARD PCoA")
card_dist <- vegdist(t(birds_metaxa_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="Metaxa2 PCoA")
card_dist <- vegdist(t(birds_card_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="CARD PCoA")
card_dist <- vegdist(t(birds_metaxa_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="Metaxa2 PCoA")
card_dist <- vegdist(t(birds_card_norm))
card_ord <- cmdscale(card_dist)
plot(card_ord, pch=21, cex=3, bg=c(rep("red", 3), rep("blue", 3)), main="CARD PCoA")
card_dist <- vegdist(t(birds_card_norm))
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
#Ordination plots
card_dist <- vegdist(t(birds_card_norm))
birds_metaxa_norm <- sweep(birds_metaxa, 2, c(4.5, 3.3, 2.9, 2.7, 0.1, 2.5), '/')
birds_metaxa <- read.table("~/Desktop/birds_metaxa6.txt", sep="\t", header=TRUE, row.names=1)
birds_card <- read.table("Desktop//birds_CARD.csv", sep=";", header=TRUE, row.names=1)
#remove bad entries from the CARD annotations
bad_card <- c("gb|AFH35853.1|ARO:3001328|Escherichia",
"gb|NP_414996.1|ARO:3004043|Escherichia",
"gb|NP_418813.1|ARO:3004109|Escherichia",
"gb|CCE36834|ARO:3003784|Mycobacterium",
"gb|AAO47226.2|ARO:3003318|Streptomyces",
"gb|YP_003971446|ARO:3003730|Bifidobacteria",
"gb|BAD59497.1|ARO:3000501|Nocardia",
"gb|CAA67349.1|ARO:3003359|Streptomyces")
birds_card <- birds_card[!(rownames(birds_card) %in% bad_card),]
birds_metaxa_norm <- sweep(birds_metaxa, 2, c(4.5, 3.3, 2.9, 2.7, 0.1, 2.5), '/')
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
warnings()
dev.off()
dev.off()
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
dev.off()
library(vegan)
birds_metaxa <- read.table("~/Desktop/birds_metaxa6.txt", sep="\t", header=TRUE, row.names=1)
birds_card <- read.table("Desktop//birds_CARD.csv", sep=";", header=TRUE, row.names=1)
#remove bad entries from the CARD annotations
bad_card <- c("gb|AFH35853.1|ARO:3001328|Escherichia",
"gb|NP_414996.1|ARO:3004043|Escherichia",
"gb|NP_418813.1|ARO:3004109|Escherichia",
"gb|CCE36834|ARO:3003784|Mycobacterium",
"gb|AAO47226.2|ARO:3003318|Streptomyces",
"gb|YP_003971446|ARO:3003730|Bifidobacteria",
"gb|BAD59497.1|ARO:3000501|Nocardia",
"gb|CAA67349.1|ARO:3003359|Streptomyces")
birds_card <- birds_card[!(rownames(birds_card) %in% bad_card),]
birds_metaxa_norm <- sweep(birds_metaxa, 2, c(4.5, 3.3, 2.9, 2.7, 0.1, 2.5), '/')
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
par(font.axis = 2)
par(font.lab = 2)
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
dev.off()
dev.off()
graphics.off()
birds_card_norm <- sweep(birds_card, 2, colSums(birds_metaxa), '/')
par(mfrow=c(1,2))
par(font.axis = 2)
par(font.lab = 2)
barplot(colSums(birds_metaxa), main="Raw counts")
barplot(colSums(birds_metaxa_norm), main="Normalised counts")
warnings()
install.packages("ggplot2")
library(ggplot2)
library()
version
#    Highland Statistics Ltd.
#    www.highstat.com
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#You need to be online for this.
#In R-studio: Copy-paste the following code in the lower left window
#             and press on enter.
#Or in the text editor of R: Copy and paste the following code into the R console
Install <- TRUE
toInstall <- c("ggplot2", "ggmap", "plyr", "lme4", "rgl", "vegan", "scatterplot3d", "VGAM")
if(Install){
install.packages(toInstall,
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
}
library(ggplot2)
library(ggmap)
library(plyr)
# If you want to be for 100% sure that ggplot2 is working properly,
# then try to execute the following code (or ask someone to help you
# executing it). Just copy-paste the code below into R and press enter.
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     <- p1 + geom_point(aes(x = X,y = Y))
#    Highland Statistics Ltd.
#    www.highstat.com
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#You need to be online for this.
#In R-studio: Copy-paste the following code in the lower left window
#             and press on enter.
#Or in the text editor of R: Copy and paste the following code into the R console
Install <- TRUE
toInstall <- c("ggplot2", "ggmap", "plyr", "lme4", "rgl", "vegan", "scatterplot3d", "VGAM")
if(Install){
install.packages(toInstall,
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
}
library(ggplot2)
library(ggmap)
library(plyr)
# If you want to be for 100% sure that ggplot2 is working properly,
# then try to execute the following code (or ask someone to help you
# executing it). Just copy-paste the code below into R and press enter.
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
#    Highland Statistics Ltd.
#    www.highstat.com
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#You need to be online for this.
#In R-studio: Copy-paste the following code in the lower left window
#             and press on enter.
#Or in the text editor of R: Copy and paste the following code into the R console
Install <- TRUE
toInstall <- c("ggplot2", "ggmap", "plyr", "lme4", "rgl", "vegan", "scatterplot3d", "VGAM")
if(Install){
install.packages(toInstall,
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
}
library(ggplot2)
library(ggmap)
library(plyr)
# If you want to be for 100% sure that ggplot2 is working properly,
# then try to execute the following code (or ask someone to help you
# executing it). Just copy-paste the code below into R and press enter.
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
# Clear memory
remove(list = ls(all = TRUE))
# Construct data set
Year = (1984:2013)
Year0 = Year-min(Year)
N = c(74,36,37,43,12,66,56,25,52,18,28,32,35,42,20,25,28,34,34,38,12,29,12,16,17,19,13,15,18,24)
Data.X = data.frame(N, Year0)
# Plot the data
dev.new()
plot(Year, N, type = "b", ylab = "Population size", xlab = "Year")
# Load library MCMCglmm
library(MCMCglmm)
# Load library MCMCglmm
install.packages("MCMCglmm")
# Load library MCMCglmm
# install.packages("MCMCglmm")
library(MCMCglmm)
# Run Possion mixed model with temporal trend ("residual" dispersion normal)
# Burn-in = 5000, Number of iterations = 205000, thinning = 20
mod = MCMCglmm(N ~ Year0,
family = "poisson",
data = Data.X,
burnin = 5000,
nitt = 205000,
thin = 20)
# Load library MCMCglmm
# install.packages("MCMCglmm")
library(MCMCglmm)
install.packages("MCMCglmm", dep=T)
# Load library MCMCglmm
# install.packages("MCMCglmm", dep=T)
library(MCMCglmm)
# Load library MCMCglmm
# install.packages("MCMCglmm", dep=T)
library(ape)
install.packages("ape")
# Load library MCMCglmm
# install.packages("MCMCglmm", dep=T)
# install.packages("ape")
library(MCMCglmm)
install.packages("ape")
# Load library MCMCglmm
# install.packages("MCMCglmm", dep=T)
# install.packages("ape")
library(MCMCglmm)
# Run Possion mixed model with temporal trend ("residual" dispersion normal)
# Burn-in = 5000, Number of iterations = 205000, thinning = 20
mod = MCMCglmm(N ~ Year0,
family = "poisson",
data = Data.X,
burnin = 5000,
nitt = 205000,
thin = 20)
summary(mod)
# Add line based on posterior mean
a = summary(mod)$solutions[1,1] # Intercept
b = summary(mod)$solutions[2,1] # Slope of Year0
Nhat = exp(a + b*Year0)         # Fitted values
lines(Year, Nhat, col= "red")
# The actual Markov chains
mod$Sol
# Plot Markov chains and distibutions
dev.new()
plot(mod)
acf(mod$Sol[,1], lag.max = 50)
acf(mod$Sol[,1], lag.max = 50)
acf(mod$Sol[,2], lag.max = 50)
# Clear memory
remove(list = ls(all = TRUE))
# Construct data set
Year = (1984:2013)
Year0 = Year-min(Year)
N = c(74,36,37,43,12,66,56,25,52,18,28,32,35,42,20,25,28,34,34,38,12,29,12,16,17,19,13,15,18,24)
Data.X = data.frame(N, Year0)
# Plot the data
dev.new()
plot(Year, N, type = "b", ylab = "Population size", xlab = "Year")
# Load library MCMCglmm
# install.packages("MCMCglmm", dep=T)
# install.packages("ape")
library(MCMCglmm)
# Run Possion mixed model with temporal trend ("residual" dispersion normal)
# Burn-in = 5000, Number of iterations = 205000, thinning = 20
mod = MCMCglmm(N ~ Year0,
family = "poisson",
data = Data.X,
burnin = 5000,
nitt = 205000,
thin = 20)
summary(mod)
# Add line based on posterior mean
a = summary(mod)$solutions[1,1] # Intercept
b = summary(mod)$solutions[2,1] # Slope of Year0
Nhat = exp(a + b*Year0)         # Fitted values
lines(Year, Nhat, col= "red")
# The actual Markov chains
mod$Sol
# Plot Markov chains and distibutions
dev.new()
plot(mod)
par(mfrow=c(1,2))
acf(mod$Sol[,1], lag.max = 50)
acf(mod$Sol[,2], lag.max = 50)
summary(mod)
plot(mod)
a = summary(mod)$solutions[1,1] # Intercept
b = summary(mod)$solutions[2,1] # Slope of Year0
Nhat = exp(a + b*Year0)         # Fitted values
lines(Year, Nhat, col= "red")
# Run Possion mixed model with temporal trend ("residual" dispersion normal)
# Burn-in = 5000, Number of iterations = 205000, thinning = 20
mod = MCMCglmm(N ~ Year0,
family = "poisson",
data = Data.X,
burnin = 5000,
nitt = 205000,
thin = 20)
summary(mod)
help("MCMCglmm")
summary(mod)$solutions
library(dplyr)
library(corrplot)
library(circlize)
library(emmeans)
library(gclus)
library(ggplot2)
library(gplots)
library(gridExtra)
library(HMSC)
ls -l /Library/Frameworks/R.framework/Versions/
library(dplyr)
library(corrplot)
library(circlize)
library(emmeans)
library(gclus)
library(ggplot2)
library(gplots)
library(gridExtra)
library(HMSC)
install.packages("HMSC R/HMSC_2.0-10.tgz", repos=NULL, type="binary")
setwd("~/Documents/bioinformatics_and_evolution/2019/projects/metagen/bedcov")
library(ggplot2)
library(reshape)
# import coverage files into list object
files=list.files()
files=files[grepl(".cov", files)]
filenames=gsub("_mdup.cov","",basename(files))
filenames=gsub("_rg.cov","",filenames)
names(files)=filenames
files_comb_al = files[grepl("_all", files)]
files_comb_al
length(files_comb_al)
comb_al_list=list()
for(i in 1:length(files_comb_al)){
a=read.table(files_comb_al[i], sep="\t", header=F)
a=rename(a,c(V1="contig", V2="start", V3="end", V4="reads_per_1k", V5="non_0_bases", V6="entry_length", V7="non_0_fraction")) # renames the header
a$strain=factor(gsub("_.*","", a$contig))
a$sample = names(files_comb_al[i])
comb_al_list[[i]]=a
}
comb_al_list[[1]]
comb_al_summary=Reduce(function(...) merge(..., all = T), comb_al_list)
unique(comb_al_summary$strain)
head(comb_al_summary)
# add species names
comb_al_summary$strain = gsub("[gnl|X|]","",comb_al_summary$strain)
comb_al_summary$strain = gsub("BMIABBIL", "K12", comb_al_summary$strain)
comb_al_summary$strain = gsub("IDIPBEOP", "105", comb_al_summary$strain)
comb_al_summary$strain = gsub("EAEKGGIE", "1279", comb_al_summary$strain)
comb_al_summary$strain = gsub("JFDMDMML", "1287", comb_al_summary$strain)
comb_al_summary$strain = gsub("CJLINOFA", "1292", comb_al_summary$strain)
comb_al_summary$strain = gsub("LGLAIKJM", "1299", comb_al_summary$strain)
comb_al_summary$strain = gsub("PBDEHDGG", "1842", comb_al_summary$strain)
comb_al_summary$strain = gsub("IJBFBDHI", "1874", comb_al_summary$strain)
comb_al_summary$strain = gsub("OLKIGDAF", "1875", comb_al_summary$strain)
comb_al_summary$strain = gsub("IBBHIMLJ", "1896", comb_al_summary$strain)
comb_al_summary$strain = gsub("IKBFOMHN", "1923", comb_al_summary$strain)
comb_al_summary$strain = gsub("FGMDJBJE", "1966", comb_al_summary$strain)
comb_al_summary$strain = gsub("ABNHBPOL", "1972", comb_al_summary$strain)
comb_al_summary$strain = gsub("LPGKLAMA", "1977", comb_al_summary$strain)
comb_al_summary$strain = gsub("DDABIBKJ", "1988", comb_al_summary$strain)
comb_al_summary$strain = gsub("EJMNOJEN", "1992", comb_al_summary$strain)
comb_al_summary$strain = gsub("BPHLMDMA", "2159", comb_al_summary$strain)
comb_al_summary$strain = gsub("JMKNMFKB", "216", comb_al_summary$strain)
comb_al_summary$strain = gsub("MEJPDLNM", "2160", comb_al_summary$strain)
comb_al_summary$strain = gsub("HBKMOOGJ", "2164", comb_al_summary$strain)
comb_al_summary$strain = gsub("CDGJPFOH", "2443", comb_al_summary$strain)
comb_al_summary$strain = gsub("ODLGDGCB", "2467", comb_al_summary$strain)
comb_al_summary$strain = gsub("BNKCIJAK", "2494", comb_al_summary$strain)
comb_al_summary$strain = gsub("OJCBDLJO", "262", comb_al_summary$strain)
comb_al_summary$strain = gsub("DPMDEPGB", "2659", comb_al_summary$strain)
comb_al_summary$strain = gsub("CBFNKHCI", "2792", comb_al_summary$strain)
comb_al_summary$strain = gsub("PPBPPCPG", "2948", comb_al_summary$strain)
comb_al_summary$strain = gsub("JHKIHDGE", "3031", comb_al_summary$strain)
comb_al_summary$strain = gsub("CKLFCLNC", "3172", comb_al_summary$strain)
comb_al_summary$strain = gsub("MHFJDPFK", "3237", comb_al_summary$strain)
comb_al_summary$strain = gsub("NHMKOMBD", "403", comb_al_summary$strain)
comb_al_summary$strain = gsub("AMIEGGJA", "6", comb_al_summary$strain)
comb_al_summary$strain = gsub("GDIGBBFK", "97", comb_al_summary$strain)
comb_al_summary$strain = gsub("ANC1_RP4", "RP4", comb_al_summary$strain)
comb_al_summary$strain = gsub("ANC1", "RP4", comb_al_summary$strain)
unique(comb_al_summary$strain)
# order by sample and species
comb_al_summary=comb_al_summary[order(comb_al_summary$sample, comb_al_summary$strain),]
nrow(comb_al_summary)
head(comb_al_summary)
comb_al_summary$SPECIES = paste("HAMBI", comb_al_summary$strain, sep = "_")
comb_al_summary$SAMPLE = gsub("_all", "", comb_al_summary$sample)
head(comb_al_summary)
cont=read.table("~/Documents/bioinformatics_and_evolution/2018/metagen/seq 3/seq/variants/Contig_ID_and_length.txt")
colnames(cont) = c("contig", "CONTIG_LENGTH")
cont
cont$contig = as.factor(cont$contig)
str(comb_al_summary)
setwd("~/2019/regime_shift/data/deep_seq")
filtered_var = read.table("filtered_variant_data.txt", sep="\t", header=T)
filtered_var$COMBOS = paste(filtered_var$SAMPLE, filtered_var$SPECIES, sep = "_")
x = unique(filtered_var$COMBOS)
x
head(comb_al_summary)
comb_al_summary = comb_al_summary[,c(10,11,1:4)]
head(comb_al_summary)
comb_al_summary$COMBOS = paste(comb_al_summary$SAMPLE, comb_al_summary$SPECIES, sep = "_")
head(comb_al_summary)
comb_al_summary = comb_al_summary[comb_al_summary$COMBOS %in% x,]
dim(comb_al_summary)
comb_al_summary$TIME = gsub("_AB.*", "", comb_al_summary$SAMPLE)
comb_al_summary$TIME = as.numeric(gsub("T", "", comb_al_summary$TIME))
comb_al_summary$ANTIBIOTIC = gsub(".*_AB", "", comb_al_summary$SAMPLE)
comb_al_summary$ANTIBIOTIC = as.numeric(gsub("_I.*", "", comb_al_summary$ANTIBIOTIC))
comb_al_summary$IMMIGRATION = gsub(".*_I", "", comb_al_summary$SAMPLE)
comb_al_summary$IMMIGRATION = as.factor(as.character(gsub("_REP.*", "", comb_al_summary$IMMIGRATION)))
comb_al_summary$REPLICATE = gsub(".*_REP", "", comb_al_summary$SAMPLE)
comb_al_summary$REPLICATE = as.factor(as.character(gsub("_all", "", comb_al_summary$REPLICATE)))
head(comb_al_summary)
cont=read.table("~/Documents/bioinformatics_and_evolution/2018/metagen/seq 3/seq/variants/Contig_ID_and_length.txt")
colnames(cont) = c("contig", "CONTIG_LENGTH")
cont$contig = as.factor(cont$contig)
str(comb_al_summary)
comb_al_summary2 = merge(comb_al_summary, cont, by="contig")
dim(comb_al_summary2)
colnames(comb_al_summary2)
comb_al_summary2 = comb_al_summary2[,c(3,2,1,12,4:11)]
head(comb_al_summary2)
library(dplyr)
comb_al_summary2 %>%
group_by(SPECIES) %>%
mutate(CUM_CONTIG_LENGTH = cumsum(CONTIG_LENGTH))
cont
cont$SPE = gsub("_.*", "", cont$contig)
cont
cont = cont %>%
group_by(SPE) %>%
mutate(CUM_CONTIG_LENGTH = cumsum(CONTIG_LENGTH))
cont
cont=read.table("~/Documents/bioinformatics_and_evolution/2018/metagen/seq 3/seq/variants/Contig_ID_and_length.txt")
colnames(cont) = c("contig", "CONTIG_LENGTH")
cont$contig = as.factor(cont$contig)
str(comb_al_summary)
cont$SPE = gsub("_.*", "", cont$contig)
library(dplyr)
cont = as.data.frame(cont %>%
group_by(SPE) %>%
mutate(CUM_CONTIG_LENGTH = cumsum(CONTIG_LENGTH)))
cont
comb_al_summary2 = merge(comb_al_summary, cont, by="contig")
dim(comb_al_summary2)
colnames(comb_al_summary2)
comb_al_summary2
comb_al_summary$REL_POSITION = comb_al_summary$CONTIG_LENGTH/comb_al_summary$CUM_CONTIG_LENGTH
comb_al_summary
comb_al_summary2$REL_POSITION = comb_al_summary2$CONTIG_LENGTH/comb_al_summary2$CUM_CONTIG_LENGTH
comb_al_summary2
unique(comb_al_summary2$REL_POSITION)
comb_al_summary2$REL_END = (comb_al_summary2$end/comb_al_summary2$CONTIG_LENGTH)*CUM_CONTIG_LENGTH
comb_al_summary2$REL_END = (comb_al_summary2$end/comb_al_summary2$CONTIG_LENGTH)*comb_al_summary2$CUM_CONTIG_LENGTH
unique(comb_al_summary2$REL_END)
comb_al_summary2$REL_END = (comb_al_summary2$end/comb_al_summary2$CONTIG_LENGTH)*comb_al_summary2$REL_POSITION
unique(comb_al_summary2$REL_END)
comb_al_summary2
comb_al_summary = comb_al_summary[order(comb_al_summary$COMBOS),]
comb_al_summary = comb_al_summary[order(comb_al_summary$COMBOS, comb_al_summary$start, comb_al_summary$end),]
comb_al_summary
comb_al_summary2 = comb_al_summary2[order(comb_al_summary2$COMBOS, comb_al_summary2$start, comb_al_summary2$end),]
comb_al_summary2
comb_al_summary2 = comb_al_summary2[order(comb_al_summary2$COMBOS, comb_al_summary2$contig, comb_al_summary2$start, comb_al_summary2$end),]
comb_al_summary2
comb_al_summary2$REL_END
comb_al_summary2
colnames(comb_al_summary2)
comb_al_summary2 = comb_al_summary2[,c(3,2,1,12,14:16,4:6,8:11)]
head(comb_al_summary2)
# save table
write.table(comb_al_summary2, "coverage_1kb_window.txt", row.names = F, sep="\t")
